---
# tasks file for rl_veeam_install_proxy_components

- name: Create 'C:\Temp' directory if not exists
  ansible.windows.win_file:
    path: 'C:\Temp'
    state: directory
  vars:
    ansible_winrm_transport: 'kerberos'
    ansible_user: '{{ windows_domain_admin_username }}'
    ansible_password: '{{ windows_domain_admin_password }}'

- name: Copy .net-runtime from SMB share \\{{ windows_smb_hostname }}\{{ windows_smb_share }} to Windows VM
  ansible.windows.win_copy:
    src: '\\{{ windows_smb_hostname }}\{{ windows_smb_share }}\dotnet-runtime-8.0.19-win-x64.exe'
    dest: '{{ veeam_install_tmp_folder }}'
    remote_src: true
  register: copy_lic_file_status
  vars:
    ansible_winrm_transport: 'kerberos'
    ansible_user: '{{ windows_domain_admin_username }}'
    ansible_password: '{{ windows_domain_admin_password }}'

- name: Check if .NET Runtime >= 8.0 is installed
  ansible.windows.win_shell: |
    $dotnet = "C:\Program Files\dotnet\dotnet.exe"
    if (-Not (Test-Path $dotnet)) { exit 1 }
    $version = & $dotnet --list-runtimes | ForEach-Object {
        if ($_ -match 'Microsoft\.NETCore\.App (\d+)\.(\d+)\.(\d+)') {
            [version]("$($matches[1]).$($matches[2]).$($matches[3])")
        }
    } | Sort-Object -Descending | Select-Object -First 1
    if ($version -ge [version]"8.0.0") { exit 0 } else { exit 1 }
  register: dotnet_check
  ignore_errors: true
  vars:
      ansible_winrm_transport: 'kerberos'
      ansible_user: '{{ windows_domain_admin_username }}'
      ansible_password: '{{ windows_domain_admin_password }}'

- name: Install .NET Runtime silently version {{ dotnet_runtime_version }}
  ansible.windows.win_package:
    path: '{{ veeam_install_tmp_folder }}\dotnet-runtime-8.0.19-win-x64.exe'
    state: present
    arguments: '/quiet /norestart'
  when: dotnet_check.rc != 0
  register: dotnet_install_result
  vars:
    ansible_winrm_transport: 'kerberos'
    ansible_user: '{{ windows_domain_admin_username }}'
    ansible_password: '{{ windows_domain_admin_password }}'

- name: Copy PowerShell 7.5.2 installer from SMB share \\{{ windows_smb_hostname }}\{{ windows_smb_share }} to Windows VM
  ansible.windows.win_copy:
    src: '\\{{ windows_smb_hostname }}\{{ windows_smb_share }}\PowerShell-7.5.2-win-x64.msi'
    dest: '{{ veeam_install_tmp_folder }}'
    remote_src: true
  register: copy_powershell_file_status
  vars:
    ansible_winrm_transport: 'kerberos'
    ansible_user: '{{ windows_domain_admin_username }}'
    ansible_password: '{{ windows_domain_admin_password }}'

- name: Check if PowerShell 7.5.2 is already installed
  ansible.windows.win_shell: |
    $pwsh = "C:\Program Files\PowerShell\7\pwsh.exe"
    if (-Not (Test-Path $pwsh)) { exit 1 }
    $version = & $pwsh -NoProfile -Command '$PSVersionTable.PSVersion'
    if ($version.Major -eq 7 -and $version.Minor -ge 5) { exit 0 } else { exit 1 }
  register: pwsh_check
  ignore_errors: true
  vars:
      ansible_winrm_transport: 'kerberos'
      ansible_user: '{{ windows_domain_admin_username }}'
      ansible_password: '{{ windows_domain_admin_password }}'

- name: Install PowerShell 7.5.2 silently
  ansible.windows.win_package:
    path: '{{ veeam_install_tmp_folder }}\PowerShell-7.5.2-win-x64.msi'
    state: present
    arguments: '/quiet /norestart'
  when: pwsh_check.rc != 0
  register: pwsh_install_result
  vars:
    ansible_winrm_transport: 'kerberos'
    ansible_user: '{{ windows_domain_admin_username }}'
    ansible_password: '{{ windows_domain_admin_password }}'

- name: Authenticate with VSPC API to get access token
  ansible.builtin.uri:
    url: '{{ veeam_backup_server_api_url }}:4443/v8/token'
    validate_certs: false
    method: POST
    body:
      grant_type: 'password'
      disable_antiforgery_token: true
      username: '{{ windows_local_admin_new_vm_username }}'
      password: '{{ windows_local_admin_new_vm_password }}'
    body_format: form-urlencoded
    headers:
      Content-Type: 'application/x-www-form-urlencoded'
    return_content: yes
    status_code: 200
  register: auth_response
  delegate_to: localhost
  no_log: false

- name: Set access token as a temporary fact for this playbook run
  ansible.builtin.set_fact:
    access_token: '{{ auth_response.json.access_token }}'

- name: Check Veeam Proxy Components already installed
  ansible.builtin.uri:
    url: '{{ veeam_backup_server_api_url }}:4443/v8/proxies'
    validate_certs: false
    method: GET
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ access_token }}"
    status_code: [200,201]
  register: proxy_check_result
  delegate_to: localhost
  no_log: false

- name: Debug proxy_check_result
  ansible.builtin.debgu:
    var: proxy_check_result

- name: Install Veeam Proxy Components via REST API
  ansible.builtin.uri:
    url: '{{ veeam_backup_server_api_url }}:4443/v8/proxies'
    validate_certs: false
    method: POST
    body_format: json
    body:
      useDomainNetwork: true
      useInternetProxy: false
      operatingSystem: "Windows"
      id: "00000000-0000-0000-0000-000000000000"
      hostName: "{{ veeam_backup_proxies.ip }}"
      description: "{{ veeam_backup_proxies.description }}"
      port: 9193
      username: "{{ windows_local_admin_new_vm_username }}"
      password: "{{ windows_local_admin_new_vm_password }}"
      serviceAccountName: "{{ veeam_service_account_username }}"
      serviceAccountPassword: "{{ veeam_service_account_password }}"
      createServiceAccount: true
      enableNetworkThrottling: false
      attachUsedProxy: false
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ access_token }}"
    status_code: [200,201]
  failed_when: >
    proxy_check_result.rc != 0 and
    ("Proxy already exists on the target machine" not in proxy_check_result.stderr and
     "is already a proxy" not in proxy_check_result.stderr)
  changed_when: "'Proxy already exists on the target machine' not in proxy_check_result.stderr and 'is already a proxy' not in proxy_check_result.stderr"
  register: proxy_install_result
  delegate_to: localhost
  no_log: false